/* * Copyright (c) 2015 Samsung Electronics Co., Ltd. All rights reserved.  * Redistribution and use in source and binary forms, with or without modification, are permitted provided that  * the following conditions are met: *  *     * Redistributions of source code must retain the above copyright notice,  *       this list of conditions and the following disclaimer.  *     * Redistributions in binary form must reproduce the above copyright notice,  *       this list of conditions and the following disclaimer in the documentation and/or  *       other materials provided with the distribution.  *     * Neither the name of Samsung Electronics Co., Ltd. nor the names of its contributors may be used to endorse or  *       promote products derived from this software without specific prior written permission. *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE * POSSIBILITY OF SUCH DAMAGE. */package com.jhb.dvt.dvt_store.Services;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.List;public class ImageFetchModelImpl {    public static final class TBListReqMsg implements Model.JsonSerializable {        public static final String ID = "offset";        String mMessgaeId = "";        Long mId = -1L;        public TBListReqMsg() {        }        public TBListReqMsg(Long id) {            mMessgaeId = Model.THUMBNAIL_LIST_REQ;            mId = id;        }        public String getMessageIdentifier() {            return mMessgaeId;        }        public long getID() {            return mId;        }        public Object toJSON() throws JSONException {            JSONObject json = new JSONObject();            json.put(Model.MSG_ID, mMessgaeId);            json.put(ID, mId);            return json;        }        public void fromJSON(Object obj) throws JSONException {            JSONObject json = (JSONObject) obj;            mMessgaeId = json.getString(Model.MSG_ID);            mId = json.getLong(ID);        }    }    public static final class TBListRespMsg implements Model.JsonSerializable {        public static final String COUNT = "count";        public static final String LIST = "list";        public static final String REASON = "reason";        public static final String RESULT = "result";        public List<TBModelJson> msgTBList = null;        String mMessgaeId = "";        String mResult = "";        int mReason = 0;        int mCount = 0;        public TBListRespMsg() {        }        public TBListRespMsg(String result, int reason, int count,                    List<TBModelJson> TBList) {            mMessgaeId = Model.THUMBNAIL_LIST_RSP;            mResult = result;            mReason = reason;            mCount = count;            msgTBList = new ArrayList<TBModelJson>();            msgTBList.addAll(TBList);        }        public String getMessageIdentifier() {            return mMessgaeId;        }        public int getMsgCount() {            return mCount;        }        public String getResult() {            return mResult;        }        public int getReason() {            return mReason;        }        public List<TBModelJson> getmsgTBList() {            return msgTBList;        }        @Override        public Object toJSON() throws JSONException {            JSONObject json = new JSONObject();            json.put(Model.MSG_ID, mMessgaeId);            json.put(RESULT, mResult);            json.put(REASON, mReason);            json.put(COUNT, mCount);            JSONArray msgarray = new JSONArray();            for (TBModelJson sms : msgTBList) {                Object obj = sms.toJSON();                msgarray.put(obj);            }            json.put(LIST, msgarray);            return json;        }        @Override        public void fromJSON(Object obj) throws JSONException {            JSONObject json = (JSONObject) obj;            mMessgaeId = json.getString(Model.MSG_ID);            mResult = json.getString(RESULT);            mReason = json.getInt(REASON);            mCount = json.getInt(COUNT);            JSONArray jsonArray = json.getJSONArray(LIST);            msgTBList = new ArrayList<TBModelJson>();            for (int i = 0; i < jsonArray.length(); i++) {                JSONObject jsonObjct = (JSONObject) jsonArray.getJSONObject(i);                TBModelJson sms = new TBModelJson();                sms.fromJSON(jsonObjct);                msgTBList.add(sms);            }        }    }    public static final class ImgReqMsg implements Model.JsonSerializable {        public static final String ID = "id";        public static final String WIDTH = "width";        public static final String HEIGHT = "height";        String mMessgaeId = "";        Long mId = -1L;        int mWidth = 0;        int mHeight = 0;        public ImgReqMsg() {        }        public ImgReqMsg(Long id, int width, int height) {            mMessgaeId = Model.DOWNSCALE_IMG_REQ;            mId = id;            mWidth = width;            mHeight = height;        }        public String getMessageIdentifier() {            return mMessgaeId;        }        public long getID() {            return mId;        }        public int getWidth() {            return mWidth;        }        public int getHeight() {            return mHeight;        }        @Override        public Object toJSON() throws JSONException {            JSONObject json = new JSONObject();            json.put(Model.MSG_ID, mMessgaeId);            json.put(ID, mId);            json.put(WIDTH, mWidth);            json.put(HEIGHT, mHeight);            return json;        }        @Override        public void fromJSON(Object obj) throws JSONException {            JSONObject json = (JSONObject) obj;            mMessgaeId = json.getString(Model.MSG_ID);            mId = json.getLong(ID);            mWidth = json.getInt(WIDTH);            mHeight = json.getInt(HEIGHT);        }    }    public static final class ImgRespMsg implements Model.JsonSerializable {        public static final String RESULT = "result";        public static final String REASON = "reason";        public static final String IMAGE = "image";        String mMessgaeId = "";        String mResult = "";        int mReason = 0;        TBModelJson mDownscaledImg = null;        public ImgRespMsg() {        }        public ImgRespMsg(String result, int reason, TBModelJson img) {            mMessgaeId = Model.DOWNSCALE_IMG_RSP;            mResult = result;            mReason = reason;            mDownscaledImg = img;        }        public String getMessageIdentifier() {            return mMessgaeId;        }        public String getResult() {            return mResult;        }        public int getReason() {            return mReason;        }        public TBModelJson getDownscaledImg() {            return mDownscaledImg;        }        @Override        public Object toJSON() throws JSONException {            JSONObject json = new JSONObject();            json.put(Model.MSG_ID, mMessgaeId);            json.put(RESULT, mResult);            json.put(REASON, mReason);            json.put(IMAGE, (JSONObject) mDownscaledImg.toJSON());            return json;        }        @Override        public void fromJSON(Object obj) throws JSONException {            JSONObject json = (JSONObject) obj;            mMessgaeId = json.getString(Model.MSG_ID);            mResult = json.getString(RESULT);            mReason = json.getInt(REASON);            JSONObject jobj = json.getJSONObject(IMAGE);            mDownscaledImg = new TBModelJson();            mDownscaledImg.fromJSON(jobj);        }    }    public static final class LocationListResponseMsg implements Model.JsonSerializable {        public static final String COUNT = "count";        public static final String LIST = "list";        public static final String REASON = "reason";        public static final String RESULT = "result";        public List<TBLocationModel> msgTBList = null;        String mMessgaeId = "";        String mResult = "";        int mReason = 0;        int mCount = 0;        public LocationListResponseMsg() {        }        public LocationListResponseMsg(String result, int reason, int count,List<TBLocationModel> TBList) {            mMessgaeId = Model.LOCATION_RSP;            mResult = result;            mReason = reason;            mCount = count;            msgTBList = new ArrayList<TBLocationModel>();            msgTBList.addAll(TBList);        }        public String getMessageIdentifier() {            return mMessgaeId;        }        public int getMsgCount() {            return mCount;        }        public String getResult() {            return mResult;        }        public int getReason() {            return mReason;        }        public List<TBLocationModel> getmsgTBList() {            return msgTBList;        }        @Override        public Object toJSON() throws JSONException {            JSONObject json = new JSONObject();            json.put(Model.MSG_ID, mMessgaeId);            json.put(RESULT, mResult);            json.put(REASON, mReason);            json.put(COUNT, mCount);            JSONArray msgarray = new JSONArray();            for (TBLocationModel sms : msgTBList) {                Object obj = sms.toJSON();                msgarray.put(obj);            }            json.put(LIST, msgarray);            return json;        }        @Override        public void fromJSON(Object obj) throws JSONException {            JSONObject json = (JSONObject) obj;            mMessgaeId = json.getString(Model.MSG_ID);            mResult = json.getString(RESULT);            mReason = json.getInt(REASON);            mCount = json.getInt(COUNT);            JSONArray jsonArray = json.getJSONArray(LIST);            msgTBList = new ArrayList<TBLocationModel>();            for (int i = 0; i < jsonArray.length(); i++) {                JSONObject jsonObjct = (JSONObject) jsonArray.getJSONObject(i);                TBLocationModel sms = new TBLocationModel();                sms.fromJSON(jsonObjct);                msgTBList.add(sms);            }        }    }    public static final class TBLocationModel implements Model.JsonSerializable {        public static final String ID = "id";        public static final String NAME = "name";        public static final String PLACE = "place";        public static final String LAT = "lat";        public static final String LONG = "long";        long mId = -1L;        String mName = "";        String mPlace = "";        double mLat = 0;        double mLong = 0;        public String getPlace() {            return mPlace;        }        public String getName() {            return mName;        }        public double getLat() {            return mLat;        }        public double getLong() {            return mLong;        }        public long getId() {            return mId;        }        public TBLocationModel() {        };        public TBLocationModel(long id, String name, String place, double lat, double lng) {            super();            mId = id;            mName = name;            mPlace = place;            mLat = lat;            mLong = lng;        }        @Override        public Object toJSON() throws JSONException {            JSONObject json = new JSONObject();            json.put(ID, mId);            json.put(NAME, mName);            json.put(PLACE, mPlace);            json.put(LAT, mLat);            json.put(LONG, mLong);            return json;        }        @Override        public void fromJSON(Object jsonObj) throws JSONException {            JSONObject json = (JSONObject) jsonObj;            mId = json.getLong(ID);            mPlace = json.getString(PLACE);            mName = json.getString(NAME);            mLat = json.getLong(LAT);            mLong = json.getInt(LONG);        }    }    public static final class TBModelJson implements Model.JsonSerializable {        public static final String ID = "id";        public static final String DATA = "image";        public static final String SIZE = "size";        public static final String NAME = "name";        public static final String WIDTH = "width";        public static final String HEIGHT = "height";        public static final String PRICE = "price";        long mId = -1L;        String mData = "";        long mSize = 0L;        String mName = "";        int mWidth = 0;        int mHeight = 0;        String mPrice = "";        public String getData() {            return mData;        }        public String getName() {            return mName;        }        public String getPrice() {            return mPrice;        }        public int getWidth() {            return mWidth;        }        public int getHeight() {            return mHeight;        }        public long getSize() {            return mSize;        }        public long getId() {            return mId;        }        public TBModelJson() {        };        public TBModelJson(long id, String name, String data, String price, long size, int width, int height) {            super();            mId = id;            mName = name;            mData = data;            mWidth = width;            mHeight = height;            mSize = size;            mPrice = price ;        }        @Override        public Object toJSON() throws JSONException {            JSONObject json = new JSONObject();            json.put(ID, mId);            json.put(NAME, mName);            json.put(DATA, mData);            json.put(SIZE, mSize);            json.put(WIDTH, mWidth);            json.put(HEIGHT, mHeight);            json.put(PRICE, mPrice);            return json;        }        @Override        public void fromJSON(Object jsonObj) throws JSONException {            JSONObject json = (JSONObject) jsonObj;            mId = json.getLong(ID);            mData = json.getString(DATA);            mName = json.getString(NAME);            mSize = json.getLong(SIZE);            mHeight = json.getInt(HEIGHT);            mWidth = json.getInt(WIDTH);            mPrice = json.getString(PRICE);        }    }}